51. N-Queens
Link: https://leetcode.com/problems/n-queens/
Problem Level: Hard

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]

Example 3:
Input: n = 5
Output: [["Q....","..Q..","....Q",".Q...","...Q."],["Q....","...Q.",".Q...","....Q","..Q.."],
        [".Q...","...Q.","Q....","..Q..","....Q"],[".Q...","....Q","..Q..","Q....","...Q."],
        ["..Q..","Q....","...Q.",".Q...","....Q"],["..Q..","....Q",".Q...","...Q.","Q...."],
        ["...Q.","Q....","..Q..","....Q",".Q..."],["...Q.",".Q...","....Q","..Q..","Q...."],
        ["....Q",".Q...","...Q.","Q....","..Q.."],["....Q","..Q..","Q....","...Q.",".Q..."]]
 

Constraints:
1 <= n <= 9

Solution:

Java Code:

class Solution {
    List<List<String>> ans=new ArrayList<List<String>>();
    public List<List<String>> solveNQueens(int n) {
        char[][] board =new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        queenRec(board,0);
        return ans;
    }
    private void queenRec(char[][] board,int row){
        if(row==board.length){
            List<String> smallRes=constructAns(board);
            ans.add(smallRes);
            return;
        }
        for(int col=0;col<board.length;col++){
            if(isSafeToPlace(board,row,col)){
                board[row][col]='Q';
                queenRec(board,row+1);
                board[row][col]='.';
            }
        }
    }
    private boolean isSafeToPlace(char[][] board,int row,int col){
        //checking through the row (vertically)
        for(int i=0;i<row;i++){
            if(board[i][col]=='Q')
                return false;
        }
        
        //checking through the left Diagonal 
        int maxLeft=Math.min(row,col);
        for(int i=1;i<=maxLeft;i++){
            if(board[row-i][col-i]=='Q')
                return false;
        }
        
        //checking through the Right Diagonal
        int maxRight=Math.min(row,board.length-col-1);
        for(int i=1;i<=maxRight;i++){
            if(board[row-i][col+i]=='Q')
                return false;
        }
        return true;
    }
    private List<String> constructAns(char[][] board) {
        List<String> res = new LinkedList<String>();
        for(int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    //TC:slow as compared to the above function
    // public List<String> constructAns(char [][]board){
    //     List<String> smallRes=new ArrayList<String>();
    //     String s="";
    //     for(int i=0;i<board.length;i++){
    //         s="";
    //         for(int j=0;j<board.length;j++){
    //             s+=board[i][j];
    //         }
    //         smallRes.add(s);
    //     }
    //     return smallRes;
    // }
}

Solution Link:
Striver YT:
https://www.youtube.com/watch?v=i05Ju7AftcM&list=PLgUwDviBIf0rQ6cnlaHRMuOp4H_D-7hwP&index=10
