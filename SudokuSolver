37. Sudoku Solver
Link:https://leetcode.com/problems/sudoku-solver/
Problem Level:Hard
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:
input:  https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png
output: https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png

 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

Solution:

Java Code:
//Approach 1 MyApproach
class Solution {
    public void solveSudoku(char[][] board) {
        sudokuHelper(board);
    }
    public boolean sudokuHelper(char[][] board){
        int row=-1;
        int col=-1;
        boolean emptyLeft = true;
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    row=i;
                    col=j;
                    emptyLeft=false;
                    break;
                }
            }
            if(!emptyLeft)
                break;
        }
        if(emptyLeft)
            return true;
        for(int i=1;i<=9;i++){
            if(isSafeToPlace(board,row,col,i)){
                board[row][col]=(char)('0'+i);
                if(sudokuHelper(board))
                    return true;
                else
                    board[row][col]='.';
            }
        }
        return false;
    }
    public boolean isSafeToPlace(char [][]board,int row,int col,int num){
        //checking vertically
        // for(int i=0;i<board.length;i++){
        //     if(board[row][i]==num+'0')
        //         return false;
        // }
        //checking horizontally
        // for(int i=0;i<board.length;i++){
        //     if(board[i][col]==num+'0')
        //         return false;
        // }
        
        for(int i=0;i<board.length;i++){
            //checking vertically
            if(board[row][i]==num+'0')
                return false;
            //checking horizontally
            if(board[i][col]==num+'0')
                return false;
        }
        
        //checking in Box
        int startrow=row-(row%3);
        int startcol=col-(col%3);
        for(int i=startrow;i<startrow+3;i++){
            for(int j=startcol;j<startcol+3;j++){
            if(board[i][j]==num+'0')
                return false;
            }
        }
        return true;
    }
}

//Approach 2
class Solution {
    public void solveSudoku(char[][] board) {
        solve(board); // Simple backtracking function
    }
    
    public boolean solve(char[][] board){
        for(int i=0;i<board.length;i++){ // start traversing from row 0 to 8
            for(int j=0;j<board.length;j++){ // Now check for every col in each row
                if(board[i][j]=='.'){  // If '.' is in that row col then it shows it is empty
                    for(char c='1';c<='9';c++){ // Now we will try to fill from 1 to 9
                        if(isValid(board,i,j,c)){ //this function will return true if the corresponding ch is not in row,col,nor in 3x3 matrix
                            board[i][j]=c; // if it returns true then we will add c to board
                            if(solve(board)){ // Now we will further recurse for next empty space
                                return true;  // if this function return true it means that board is completely filled 
                            }
                            else{ // it shows that the c we filled is a deadend and we have to backtrack
                                board[i][j]='.'; //so we remove that ch
                            }
                        }
                    }
                    return false;   
                    // if it does return true for any ch 1 to 9 then it means we are in a deadend and we will return false
                }
            }
        }//finally we will return true as we completely filled the matrix
        return true;
    }
    
	// to check if the corresponding character is valid or not which means the charcater is not in the corresponding row or column or 3x3 matrix
	// we will check this in only one loop by using 3 formulaes
	// for row we will keep row constant and change col from 0 to 8 and check if the corresponding character is present or not
	// for col we will keep col constant and change row from 0 to 8 and check if the corresponding character is present or not
	// for 3x3 matrix for row it will be 3*(row/3) + i/3
	// for col = 3*(col/3) + i%3
	// board[row][col]=c return false
	// below code will help you understand this
	
	
    public boolean isValid(char board[][], int row, int col, char ch){
        for(int i=0;i<9;i++){
            if(board[row][i]==ch){
                return false;
            }
            if(board[i][col]==ch){
                return false;
            }
            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==ch){
                return false;
            }
        }
        return true;
    }
}

Solution Link:
striver: https://www.youtube.com/watch?v=FWAIf_EVUKE
Kunal: https://www.youtube.com/watch?v=nC1rbW2YSz0&list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&index=32&t=3633s
